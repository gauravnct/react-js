{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/reactjs/my-app/src/Signup.js\";\nimport React from 'react';\nimport useForm from 'react-hook-form';\nimport './css/demo.css';\nimport './css/style.css';\nimport './css/animate-custom.css';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from 'axios';\nexport default function Signup() {\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        watch = _useForm.watch,\n        errors = _useForm.errors,\n        reset = _useForm.reset,\n        setValue = _useForm.setValue;\n\n  const clearFormData = () => {\n    setValue('first_name', '');\n    setValue('last_name', '');\n    setValue('email_address', '');\n    setValue('password', '');\n    setValue('confirm_password', '');\n  };\n\n  const onSubmit = reqdata => {\n    /*console.log(data);*/\n    const formData = new FormData();\n    formData.append('action', 'register');\n    formData.append('first_name', reqdata.first_name);\n    formData.append('last_name', reqdata.last_name);\n    formData.append('email_address', reqdata.email_address);\n    formData.append('password', reqdata.password);\n    formData.append('confirm_password', reqdata.confirm_password);\n    axios({\n      url: 'http://localhost/api/register.php',\n      method: 'post',\n      data: formData\n    }).then(response => {\n      if (response.data.status) {\n        clearFormData();\n        toast(response.data.message, {\n          type: toast.TYPE.SUCCESS\n        });\n      } else {\n        toast(response.data.message, {\n          type: toast.TYPE.ERROR\n        });\n      }\n      /*console.log(response.data.message);\n      console.log(response.status);\n      console.log(response.headers);\n      console.log(response.config);*/\n\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(ToastContainer, {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnVisibilityChange: true,\n    draggable: true,\n    pauseOnHover: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(ToastContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"container_demo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"register\",\n    className: \"animate form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \" Sign up \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"first_name\",\n    className: \"uname\",\n    \"data-icon\": \"u\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"First Name\"), React.createElement(\"input\", {\n    id: \"first_name\",\n    name: \"first_name\",\n    type: \"text\",\n    placeholder: \"Enter your first name\",\n    ref: register({\n      required: true,\n      pattern: /^[A-Za-z]+$/i,\n      minLength: 2,\n      maxLength: 20\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), errors.first_name && errors.first_name.type === 'required' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"First name is required\"), errors.first_name && errors.first_name.type === 'pattern' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"First name contains only alphabetic characters\"), errors.first_name && errors.first_name.type === 'minLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"First name is at least 2 characters\"), errors.first_name && errors.first_name.type === 'maxLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"First name is not more than 20 characters\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"last_name\",\n    className: \"uname\",\n    \"data-icon\": \"u\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Last Name\"), React.createElement(\"input\", {\n    id: \"last_name\",\n    name: \"last_name\",\n    type: \"text\",\n    placeholder: \"Enter your last name\",\n    ref: register({\n      required: true,\n      pattern: /^[A-Za-z]+$/i,\n      minLength: 2,\n      maxLength: 20\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), errors.last_name && errors.last_name.type === 'required' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Last name is required\"), errors.last_name && errors.last_name.type === 'pattern' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Last name contains only alphabetic characters\"), errors.last_name && errors.last_name.type === 'minLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Last name is at least 2 characters\"), errors.last_name && errors.last_name.type === 'maxLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Last name is not more than 20 characters\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email_address\",\n    className: \"youmail\",\n    \"data-icon\": \"e\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \" Email\"), React.createElement(\"input\", {\n    id: \"email_address\",\n    name: \"email_address\",\n    type: \"text\",\n    placeholder: \"Enter your email\",\n    ref: register({\n      required: true,\n      pattern: /^\\S+@\\S+$/i\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), errors.email_address && errors.email_address.type === 'required' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Email is required\"), errors.email_address && errors.email_address.type === 'pattern' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Email is not valid\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    className: \"youpasswd\",\n    \"data-icon\": \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Your password \"), React.createElement(\"input\", {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"eg. X8df!90EO\",\n    ref: register({\n      required: true,\n      minLength: 6,\n      maxLength: 20\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), errors.password && errors.password.type === 'required' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Password is required\"), errors.password && errors.password.type === 'minLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Password is at least 6 characters\"), errors.password && errors.password.type === 'maxLength' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Password is not more than 20 characters\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"confirm_password\",\n    className: \"youpasswd\",\n    \"data-icon\": \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Confirm Password \"), React.createElement(\"input\", {\n    id: \"confirm_password\",\n    name: \"confirm_password\",\n    type: \"password\",\n    placeholder: \"eg. X8df!90EO\",\n    ref: register({\n      required: true,\n      validate: value => value === watch('password')\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), errors.confirm_password && errors.confirm_password.type === 'required' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Confirm Password is required\"), errors.confirm_password && errors.confirm_password.type === 'validate' && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Password and Confirm Password must be same.\")), React.createElement(\"p\", {\n    className: \"signin button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Sign up\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: \"change_link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Already a member ?\", React.createElement(\"a\", {\n    href: \"#tologin\",\n    className: \"to_register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \" Go and log in \"))))))));\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/reactjs/my-app/src/Signup.js"],"names":["React","useForm","ToastContainer","toast","axios","Signup","register","handleSubmit","watch","errors","reset","setValue","clearFormData","onSubmit","reqdata","formData","FormData","append","first_name","last_name","email_address","password","confirm_password","url","method","data","then","response","status","message","type","TYPE","SUCCESS","ERROR","error","console","log","required","pattern","minLength","maxLength","validate","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport useForm from 'react-hook-form'\nimport './css/demo.css';\nimport './css/style.css';\nimport './css/animate-custom.css';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from 'axios';\n\nexport default function Signup() {\n\n  const { register, handleSubmit, watch, errors, reset, setValue } = useForm()\n\n  const clearFormData = () => {\n    setValue('first_name', '');\n    setValue('last_name', '');\n    setValue('email_address', '');\n    setValue('password', '');\n    setValue('confirm_password', '');\n  };\n\n  const onSubmit = reqdata => {\n    /*console.log(data);*/\n    const formData = new FormData();\n    formData.append('action', 'register');\n    formData.append('first_name', reqdata.first_name);\n    formData.append('last_name', reqdata.last_name);\n    formData.append('email_address', reqdata.email_address);\n    formData.append('password', reqdata.password);\n    formData.append('confirm_password', reqdata.confirm_password);\n    axios({\n      url: 'http://localhost/api/register.php',\n      method: 'post',\n      data:formData\n    })\n    .then((response) => {\n        if(response.data.status){\n            clearFormData();\n            toast(response.data.message, {\n              type: toast.TYPE.SUCCESS\n            });\n        } else {\n            toast(response.data.message, {\n              type: toast.TYPE.ERROR\n            });\n        }\n        /*console.log(response.data.message);\n        console.log(response.status);\n        console.log(response.headers);\n        console.log(response.config);*/\n    }, (error) => {\n      console.log(error);\n    });\n\n  };\n\n  return (\n    <div className=\"container\">\n    <ToastContainer\nposition=\"top-right\"\nautoClose={5000}\nhideProgressBar={false}\nnewestOnTop={false}\ncloseOnClick\nrtl={false}\npauseOnVisibilityChange\ndraggable\npauseOnHover\n/>\n{/* Same as */}\n<ToastContainer />\n        <section>\n          <div id=\"container_demo\" >\n            <div id=\"wrapper\">\n                <div id=\"register\" className=\"animate form\">\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <h1> Sign up </h1>\n                        <p>\n                            <label htmlFor=\"first_name\" className=\"uname\" data-icon=\"u\">First Name</label>\n                            <input id=\"first_name\" name=\"first_name\" type=\"text\" placeholder=\"Enter your first name\" ref={register({ required: true, pattern: /^[A-Za-z]+$/i, minLength: 2, maxLength: 20 })} />\n                            {errors.first_name && errors.first_name.type === 'required' && <span>First name is required</span>}\n                            {errors.first_name && errors.first_name.type === 'pattern' && <span>First name contains only alphabetic characters</span>}\n                            {errors.first_name && errors.first_name.type === 'minLength' && <span>First name is at least 2 characters</span> }\n                            {errors.first_name && errors.first_name.type === 'maxLength' && <span>First name is not more than 20 characters</span> }\n                        </p>\n                        <p>\n                            <label htmlFor=\"last_name\" className=\"uname\" data-icon=\"u\">Last Name</label>\n                            <input id=\"last_name\" name=\"last_name\" type=\"text\" placeholder=\"Enter your last name\" ref={register({ required: true, pattern: /^[A-Za-z]+$/i, minLength: 2, maxLength: 20 })} />\n                            {errors.last_name && errors.last_name.type === 'required' && <span>Last name is required</span>}\n                            {errors.last_name && errors.last_name.type === 'pattern' && <span>Last name contains only alphabetic characters</span>}\n                            {errors.last_name && errors.last_name.type === 'minLength' && <span>Last name is at least 2 characters</span> }\n                            {errors.last_name && errors.last_name.type === 'maxLength' && <span>Last name is not more than 20 characters</span> }\n                        </p>\n                        <p>\n                            <label htmlFor=\"email_address\" className=\"youmail\" data-icon=\"e\" > Email</label>\n                            <input id=\"email_address\" name=\"email_address\" type=\"text\" placeholder=\"Enter your email\" ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}/>\n                            {errors.email_address && errors.email_address.type === 'required' && <span>Email is required</span>}\n                            {errors.email_address && errors.email_address.type === 'pattern' && <span>Email is not valid</span>}\n                        </p>\n                        <p>\n                            <label htmlFor=\"password\" className=\"youpasswd\" data-icon=\"p\">Your password </label>\n                            <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"eg. X8df!90EO\" ref={register({ required: true, minLength: 6, maxLength: 20 })} />\n                            {errors.password && errors.password.type === 'required' && <span>Password is required</span>}\n                            {errors.password && errors.password.type === 'minLength' && <span>Password is at least 6 characters</span> }\n                            {errors.password && errors.password.type === 'maxLength' && <span>Password is not more than 20 characters</span> }\n                        </p>\n                        <p>\n                            <label htmlFor=\"confirm_password\" className=\"youpasswd\" data-icon=\"p\">Confirm Password </label>\n                            <input id=\"confirm_password\" name=\"confirm_password\" type=\"password\" placeholder=\"eg. X8df!90EO\" ref={register({ required: true, validate: (value) => value === watch('password') })}  />\n                            {errors.confirm_password && errors.confirm_password.type === 'required' && <span>Confirm Password is required</span>}\n                            {errors.confirm_password && errors.confirm_password.type === 'validate' && <span>Password and Confirm Password must be same.</span> }\n                        </p>\n                        <p className=\"signin button\">\n                            <input type=\"submit\" value=\"Sign up\"/>\n                        </p>\n                        <p className=\"change_link\">\n                            Already a member ?\n                            <a href=\"#tologin\" className=\"to_register\"> Go and log in </a>\n                        </p>\n                    </form>\n                </div>\n            </div>\n          </div>\n        </section>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}